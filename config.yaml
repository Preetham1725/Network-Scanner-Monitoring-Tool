# Now let's create the configuration file, requirements, and other supporting files

# Network Scanner & Monitoring Tool Configuration
## Me: Preetham L

# Network scanning settings
network:
  default_range: "192.168.1.0/24"     # Default network range to scan
  timeout: 1                          # Timeout in seconds for network operations
  max_threads: 50                     # Maximum number of concurrent threads

# Port scanning configuration  
ports:
  # Common TCP ports to scan
  common_tcp:
    - 21    # FTP
    - 22    # SSH
    - 23    # Telnet
    - 25    # SMTP
    - 53    # DNS
    - 80    # HTTP
    - 110   # POP3
    - 143   # IMAP
    - 443   # HTTPS
    - 993   # IMAPS
    - 995   # POP3S
    - 3389  # RDP
    - 5432  # PostgreSQL
    - 3306  # MySQL
    - 8080  # HTTP Alternative
    - 8443  # HTTPS Alternative

  # Common UDP ports to scan
  common_udp:
    - 53    # DNS
    - 67    # DHCP Server
    - 68    # DHCP Client
    - 123   # NTP
    - 161   # SNMP
    - 162   # SNMP Trap

  # Custom ports (add your own)
  custom: []

# Monitoring settings
monitoring:
  interval: 300                       # Check interval in seconds (5 minutes)
  alert_threshold: 5                  # Number of failures before alerting
  log_file: "network_monitor.log"     # Log file location

# Service checking configuration
services:
  web_services:                       # Web protocols to check
    - "http://"
    - "https://"
  check_ssl: true                     # Verify SSL certificates
  user_agent: "NetworkScanner/1.0"    # User agent for HTTP requests
  
# Advanced scanning options
advanced:
  os_detection: true                  # Enable OS detection
  service_detection: true             # Enable service version detection
  aggressive_scan: false              # Enable aggressive scanning (slower but more thorough)

# Network Scanner & Monitoring Tool Dependencies
# Author: Preetham L

# Core network scanning libraries
ping3>=4.0.4                # Cross-platform ping functionality
requests>=2.31.0            # HTTP requests for web service checking
PyYAML>=6.0.1               # YAML configuration parsing

# Network and system utilities
psutil>=5.9.5               # System and network monitoring
python-nmap>=0.7.1          # Python wrapper for Nmap (optional)
scapy>=2.5.0                # Advanced packet manipulation (optional)

# Async networking (for advanced features)
asyncio                     # Built-in async support
aiohttp>=3.8.5              # Async HTTP client (optional)

# Data visualization and reporting
matplotlib>=3.7.2           # Network topology visualization (optional)
pandas>=2.0.3               # Data analysis and reporting (optional)
plotly>=5.15.0              # Interactive network graphs (optional)

# Development and testing
pytest>=7.4.0               # Unit testing
pytest-asyncio>=0.21.1      # Async testing support
pytest-cov>=4.1.0           # Test coverage
flake8>=6.0.0               # Code linting
black>=23.7.0               # Code formatting

# Optional security scanning
python-whois>=0.8.0         # WHOIS lookups
dnspython>=2.4.2            # DNS toolkit
cryptography>=41.0.3        # SSL/TLS analysis

#!/bin/bash
# Network Scanner & Monitoring Tool Setup Script
# Author: Preetham L

echo "Setting up Network Scanner & Monitoring Tool..."

# Check if Python 3 is installed
if ! command -v python3 &> /dev/null; then
    echo " Python 3 is not installed. Please install Python 3.7 or higher."
    exit 1
fi

echo "Python 3 found: $(python3 --version)"

# Check for required system tools
echo "Checking system dependencies..."

# Check if ping is available
if ! command -v ping &> /dev/null; then
    echo "Warning: ping command not found. Some features may not work properly."
fi

# Check if nmap is available (optional)
if command -v nmap &> /dev/null; then
    echo "Nmap found: $(nmap --version | head -1)"
else
    echo "Info: Nmap not found. Advanced scanning features will be limited."
fi

# Create virtual environment
echo "Creating virtual environment..."
python3 -m venv network_scanner_env
source network_scanner_env/bin/activate

# Upgrade pip
echo "Upgrading pip..."
pip install --upgrade pip

# Install requirements
echo "Installing dependencies..."
pip install -r requirements.txt

# Create sample configuration if it doesn't exist
if [ ! -f "network_config.yaml" ]; then
    echo "Creating sample configuration file..."
    echo "Please edit network_config.yaml to customize scanning parameters."
fi

# Make scripts executable
chmod +x network_scanner.py

# Create directories for outputs
mkdir -p logs
mkdir -p reports
mkdir -p scans

echo "Setup complete!"
echo ""
echo "Usage Examples:"
echo "  Basic network scan:     python network_scanner.py --scan 192.168.1.0/24"
echo "  Port scan single host:  python network_scanner.py --host 192.168.1.1 --ports 80,443,22"
echo "  Monitor hosts:          python network_scanner.py --monitor 192.168.1.1,192.168.1.2"
echo "  Comprehensive scan:     python network_scanner.py --comprehensive 192.168.1.0/24"
echo ""
echo "For help: python network_scanner.py --help"
echo ""
echo "Note: Some scanning features may require root privileges on Linux/macOS"
'''

print("=== Network Configuration File (network_config.yaml) ===")
print(network_config_yaml)
print("\n" + "="*70)
print("=== Network Requirements (requirements.txt) ===")
print(network_requirements)
print("\n" + "="*70)
print("=== Network Setup Script (setup.sh) ===")
print(network_setup_script)